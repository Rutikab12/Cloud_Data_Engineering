
Data Warehouse Modelling - Manish Kumar

Lecture -1:

What is Data Warehouse?
How it is different from databases?
How Does it look like?

How is it different from spark?
Sparks stores semi and unstructured data, run on commodity servers (cheaper than DW), provides api's for AI/ML and hence sometimes preferred over DW.
While DW mostly stores structured data and do not provide service for streaming processes like spark.

Rules of Data Warehouse?
Integrated--combines different sources
Subject Oriented--designed for specific purpose
Time_Variant --stores hsitorical aspects
Non-Volatile--cannot be changed easily

DW 				Vs 					DB

Stores Large volume of data			Store small volumme of data
Desgined for read heavy operations	Designed for write heavy operations
High Latency						Low Latency
Denormalized						Normalized
Columnar storage					Row Storage
Parallel processing of requests		Not optimized for parallel processing


Why do we need DW?

Business UseCase:
Reliance Mart
We have 1000 stores across 20 states
Every store have 1000 individual products

Moto:
We want to maximize the profit.
So we will keep cost ans inventory optimized
try to keep vendor cost as less as possible
sales as much as you can

So we decided to run a promotinal activity to increase sales
As a business user I want to analyze which products are sold at which store
under what promotional activity?

Problem without DW:

--users have to hit query directly to DB , which is not feasible and good practice for analytical processing
--will not have historical aspects of data
--eventually impact overall performance of business

Advantage of DW:

--Data Driven Decision
--One stop shopping
--Making strategic Decision using query and analyzing customer behavior
--eg: no of products sold, top 10 products, etc

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - II: Data warehouse Vs Data Lake

What is architecture of DL?

Source --> Data Lake (Storage, duming yard for whole data) --> Data Warehouse --> Business Users

Shortcomings of DW?
-3V's , volumne,variaty,velocity as data generates at very fast pace and hence can't cope up. as follows ETL process.
-only supports structured data
-cost increases as the storage increases
-vertical scaling that is you can't go beyond specific storage limit

Why do we need DL?
DL follows ELT process, it first takes data and dumps it in storage layers like HDFS,S3,GCS,etc and then allows transformation to load into DW.
This helps in horizontal scaling as mulitle machines of same storage can add up.

Modern Day Architectures of DL:

Source --> layers(Ingestion-Processing-Processed-Consumption) --> DW (optional due to consumption layer) --> End user
Ingestion -- Raw Data
Processing -- process that raw data and written to next level and access is prohibited to limited users like DE.

diff between DW and DL?

DL 														DW
can store infinitely large amount of data				can stored limited data due to storage capacity
don't required pre-defined schema						Required Pre-defined schema
stores all types of data structured,semi,unstructured	Stores mostly structured and semi data
ELT														ETL
Schema on read											Schema on write
Cost is cheaper											Cost is higher

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - III : Data Mart

What is data mart?
Why do we need data mart?
Types of Data mart?
When do we need DM and when DW?

Data mart is a subset of DW which is subject-oriented.

Characteristic of Data Mart:
-Highly subject specific area
-subset of large DW with specific business subject and specific dates
-often involves summarize data from DW
-more control to business
-fast query performance
-protect departmental data

Disadvanteges:
-sometimes copy of DW data may lies in different parts and hence data can be compromised.

Types of Data marts:
Supplier-->WholeSaler(DW)-->Retailer(DM)-->User

Dependent --> dependent on DW
Independent --> data marts created with source data without using DW and used by end user directly


Diff between DW Vs 							Independent DM
Many sources								Few Sources
ETL											ETL
Large Volumne of data						Small to medium volumne of data
Dimensionally organised						Dimensionally Organised
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - IV : DW internals(Extrtact)

What is user access layer in DW?
What is staging layer in DW?
Types of staging layer?
Why do we need staging layer?

In DW we follow ETL process, here we will deep dive into Extract process

Extract -->

Inside DW there are two layers
1. Staging Layer -- where data lands from sources 
2. User access layer -- where BI and other people takout data

What inside staging layer?
Data comes from different sources and gets stored in individual tables, for eg reliance mart , where you have data from zones and now there is addition of two stores in 2 zones.
Hence data from two zones will lands in staging area through ingestion.
Then Dimensional Modelling will be applied to make its schema uniform and store it in user access layer or say dw table.
As we are thinking about only extract process, we will not do any modelling at ingestion level as fetching data asap is required.

Types of staging layer:

1. Persistent layer -- after extracting data is there at staging layer after ingesting into master table in user access layer. Staging layer is not emptied.
advantages: 
-can build user access layer without source system if data lost in user access layer.
-data QA can be done directly from staging layer

disadvantage:
-more storage required
-risk of data security

2. Non persistent layer -- while here staging layer is emptied after ingesting into master table.
advantages:
-less storage required
-less or no data security issues

disadvantage:
-need to go back to source if DW goes corrupt
-data QA need to be done directly from source

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - V : DW internals(Transformations)

There are two purpose of transformation in DW
1. Uniformity
2. Restructuring

Common Data Transformation:

1.Data Value Unification
Suppose in data warehouse , data of zone-1 contains column status with values Y/N and zone-2 contains column mode with values active/inactive.
This type of data needs to be uniformed while dumping into data warehouse.

2.Data type and Size unification
Suppose in above example, one data have data type as varchar and other one is boolean, hence this needs to be fixed with common datatype and size.

3.Deduplication
Duplicate data have to be fixed prior to entering data warehouse.

4.Dropping columns and records
Drop unnecessary columns and rows as per requirements.

5.Common Known errors
Such as handling missing, null data with proper rules.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - VI : DW internals(Loading)

Two types of loading in DW
1. Initial Loading
-Done only once while going live, that is data ingested at the start or while go live

2. Incremental Loading
Data warehouse need to be updated with data. some examples can be
New Data, Modified Data ,Delete/Inactive Data

Types of Incremental Loading:
1. Append : appending new data with exisiting data at last.
2. In Place Update : overwriting the exisiting data with new ones directly at same place
3. Complete Replacement : replacing whole data with existing data at one go.
4. Rolling append :Suppose we are inserting data every month and have restricitons that we can keep data on only 24 months.
If now one month of new data comes, it will get append at last but due to restriction we have to delete existing data of 1 month.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - VII : Fact and Dimension Tables
Dimensional Modelling

What is fact table?
contains measurement that is only numbers

What is dimension table?
contains context of the numbers inside fact table

moto:
find out which products selling at which store under what promotional activity.

so fact and dimension tables can be linked to each other for business use cases, bt primary key -Foreign Key relationship.

Dimension Modelling Fundamentals:

Why do we selected that table , rows, pk ,fk only in previous step?
Four Steps of Dimensional Design:

1. Select the Business
Ask below questions to business as a consultant
-what your business do?
-what measurement you want to analyze?
-how does your current operational dataset looks like?

2. Declare the Grain
Grain means level of details inside the fact table.
Basically what each row in fact table explains.

Sometimes it may contains aggregated_data , hence not sufficient for some queries. So we need to add dimensions to it , to gain the granularity.
But it results in storage increase.

3. Identify the Dimensions
Identify which context applies to fact table as per requirements.

4. Identify the Facts
what measurements to be added in fact table for details like grain.

We can derive fact , by using existing measurements in fact table, eg, profit.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - 8 : Types of Facts in Fact table

What is additivity?
simple adding, can add facts along any dimension

What is semi-additive?
can add along some dimension but not all.
eg: deriving quantity of products available at one store on some day? possible
but total quantity in inventory cannot be determined by these quantity available at each store, hence semi-additive

What is non-additive?
can't add facts along any dimension

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - 8 : Types of Fact table

What are the types of facts table?
-Transaction fact table (we have used till now)
-Periodic snapshot fact table
-Accumulating snapshot fact table

Why do we need accumlating snapshot table?
it is used where we have fixed start and end .
eg: order delivery

What are the challenges with periodic snapshot table?


Periodic Snapshot table:
eg: inventory table
Here at regular interval we take a snapshot of the table, where limit is set like 3months , 2 months, weekly,yearly as per changes happenend.
And after the expiry , data is not deleted it is aggregated.

one extra table type is
Factless Fact Table:
where measurement is not there, but the recors itself is considered as fact.
eg: student_Attendance_fact-table, which product doesn't sold at promotional activity,etc.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - 9 : Dimension Table (Date Dimension Table)

What is dimension table?
gives context about facts

Why do we need date dimension table?
we can derive certain details from facts table only but there we cannot join. Join is expensive operation.
and hence date dimension table is needed. It's frequency can be daily,hourly,weekly,per minute,etc.

What should be frequency of records in dimension table?
depending on the requirement for the end user we can have intuitive columns and select what type of frequency needed.
eg: daily updated dimension table.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - 10 : Dimension Table (Product Dimension Table and Snowflake Schema)

About Product Dimension table
In our example of reliance mart, stores fetch product details from master product table.
This master product table keeps every record if product is no more also.


About One to many hierarchy
Consider in this table, we have category description and we have other 20 category related columns with repeated values which are increasing our storage.
We can mapped them in different table. Hence we need snowflake schema. Above one is called star schema.
eg: university dim_table, where we have different colleges with same departments or etc.
eg: products at reliance mart, under different category and department.


Snowflake Schema Fundamentals
Creating different dimensions for category , description is referred as snowflake schema.


Measurement in dimension table
We can have standarad price in product dimension table, as it can be generic and can be kept here
and also in fact table.

Rollup,Rolldown

Drillup,DrillDown

Rollup and Drillup -> Rollup contains summarized data by quarterly,yearly,etc.
while drilldown is removing granularity from table.

RollDown and DrillDown -->Rolldown is adding other columns to explain granularity.
while drilldown is taking more columns to explain grain. it's reverse is rollup/drillup.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - 11 : Types of Dimensions

-what are common types of dimensions?
-what is conformed dimension?
-what is role playing dimension and why do we need it?
-when to keep multiple dimensions in one dimension?


Types of dimensions
-Conformed Dimension
One dimension is used everywhere , eg: retails_Sales_Dimension_table
also a date_dimension_Table, which is made once and used more than one place if required.
advantages:
it don't have copies of data
possess same schema i.e column name and rows name
hence we can perform rollup,drilldown at same level
helps in reporting and avoid mistakes


-Role Playing Dimension
Here we have one common table such as date_dimension_table , we create views on it and modify those views and use them.
helpful in join operation.

-Junk Dimension
eg: transaction fact table
suppose here we added payment_mode and promotional columns which will hold values such as 'Cash/UPI' and 'Y/N'. 
if we stored these values in different tables we will unnecessary increase storage and all. 
Hence instead of keeping them in separate table we merge them in one table, as it is less useful, and will hold unwanted space in fact table if added.
This is individual table is called as junk dimension table.


-Slowly changing Dimension
later 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - 12 : Star Schema and Snowflake Schema

-what is star schema
if we are oing one step away to get information then it is star schema.
it is denormalized.

product_dim,date_dim -- common table -- order_dim,city_dim 

-what is snowflake schema
If we further break product dimension table into category,departmental dimensions ,
it become normalized to avoid redundancy. hence called snowflake schema.

in dimension modeeling we focus more on computation more than storage.
while in transaction modelling we focus on storage rather than computation using normalization heavily.
this phenomenon is known as trade-off

-what is normalization
-what is denormalization
-advantage of star schema over snowflake schema and vice-versa

star schema 								Snowflake schema
it takes more space to keep same info		it takes less space than star schema
low latency in query						more latency in query
denormalized state							denormalized and normalized state
simple design to implement					Complex design to implement
High data redundancy						Low data redundancy
less no of joins hence no wastage of RAM	more no of joins required.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - 13 : Keys

-what is PK and FK?
-features of PK and FK?
PK: 
can't be null,duplicate,empty.
can be numeric or alphanuemric and only one PK is there.

FK:
can have null values, duplicate values
it is PK of some other table present in another table
used for establishing relation between tables

-what is composite key?
key made by combining two columns.

-what is natural key/business key?
a key from which we can derive business value or natural key
eg: SUG4025 ->SUGAR,40KG,2025 date
we can or cannot uniquely identify natural key
it can violate business data security.
larger in size and hence cosume more memory.

-what is surrogate key/fact less key?
used in fact and dimension table in DW
it is guranteed to be unique key
sequential numeric digit : indexing managed in better way

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lecture - 14 : Slowly Changing Dimensions

-what is SCD?
change in dimensions wrt time

-what are types of SCD?
Type 0: Remian original never change ,eg: DOJ,etc
Type 1: do inplace update/ overwrite, hence there will be no historic data
Type 2: stores historical data. new columns are introduced such as status='act/inact', start_date and end_date.
		we append new record and mark old record as inactive and marked its end date, as well as new record date with max end date.
Type 3:	generally not used. here if sales department splits into sales and marketing dept, then to know its functioning in old format we will use type 3.
Type 4/5/6

-How to select which SCD to use in which condition?
depends on table and data we are working on.

